-- Create the 'profiles' table
CREATE TABLE IF NOT EXISTS public.profiles (
  id UUID PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
  created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
  updated_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
  email TEXT UNIQUE
);

-- Comments for clarity
COMMENT ON TABLE public.profiles IS 'Stores user profile information, extending auth.users.';
COMMENT ON COLUMN public.profiles.id IS 'User ID, references auth.users.id.';

-- Function to automatically create a profile for a new user
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS TRIGGER
LANGUAGE plpgsql
SECURITY DEFINER SET search_path = public
AS $$
BEGIN
  INSERT INTO public.profiles (
    id, 
    email
  )
  VALUES (
    NEW.id, 
    NEW.email
  );
  RETURN NEW;
EXCEPTION WHEN OTHERS THEN
  -- Log the error (this will appear in Supabase logs)
  RAISE LOG 'Error in handle_new_user trigger: %', SQLERRM;
  -- Still return NEW so the user creation succeeds even if profile fails
  RETURN NEW;
END;
$$;

-- Trigger to call the function after a new user is inserted into auth.users
DROP TRIGGER IF EXISTS on_auth_user_created ON auth.users;
CREATE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW EXECUTE PROCEDURE public.handle_new_user();

-- Enable Row Level Security (RLS) for the profiles table
ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;

-- Policy: Users can select their own profile
DROP POLICY IF EXISTS "Allow individual user read access to their own profile" ON public.profiles;
CREATE POLICY "Allow individual user read access to their own profile"
  ON public.profiles FOR SELECT
  USING (auth.uid() = id);

-- Policy: Users can update their own profile (be specific about columns if needed for client-side updates)
-- For now, most updates (like subscription) will be via service_role key from webhooks/API.
DROP POLICY IF EXISTS "Allow individual user to update their own profile" ON public.profiles;
CREATE POLICY "Allow individual user to update their own profile"
  ON public.profiles FOR UPDATE
  USING ((select auth.uid()) = id)
  WITH CHECK ((select auth.uid()) = id);

-- Policy: Allow service_role to do anything (important for backend processes like webhooks)
DROP POLICY IF EXISTS "Allow service_role full access to profiles" ON public.profiles;
CREATE POLICY "Allow service_role full access to profiles"
  ON public.profiles FOR ALL
  USING (auth.role() = 'service_role')
  WITH CHECK (auth.role() = 'service_role');

-- Create the 'saved_recipes' table
CREATE TABLE IF NOT EXISTS public.saved_recipes (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
  recipe_name TEXT NOT NULL,
  recipe_data JSONB NOT NULL,
  is_favorite BOOLEAN DEFAULT FALSE,
  folder TEXT DEFAULT 'Saved Recipes' NOT NULL -- Added folder column
);

-- Comments
COMMENT ON TABLE public.saved_recipes IS 'Stores recipes saved by users.';
COMMENT ON COLUMN public.saved_recipes.user_id IS 'The user who saved the recipe.';
COMMENT ON COLUMN public.saved_recipes.recipe_data IS 'The full JSON data of the recipe.';
COMMENT ON COLUMN public.saved_recipes.is_favorite IS 'Whether the user has marked this recipe as a favorite.';

-- Enable RLS
ALTER TABLE public.saved_recipes ENABLE ROW LEVEL SECURITY;

-- Policy: Users can manage (CRUD) their own saved recipes
DROP POLICY IF EXISTS "Allow individual user full CRUD access to their own recipes" ON public.saved_recipes;
CREATE POLICY "Allow individual user full CRUD access to their own recipes"
  ON public.saved_recipes FOR ALL
  USING ((select auth.uid()) = user_id)
  WITH CHECK ((select auth.uid()) = user_id);

-- Policy: Allow service_role to do anything (e.g., for admin purposes or complex backend logic)
DROP POLICY IF EXISTS "Allow service_role full access to saved_recipes" ON public.saved_recipes;
CREATE POLICY "Allow service_role full access to saved_recipes"
  ON public.saved_recipes FOR ALL
  USING (auth.role() = 'service_role')
  WITH CHECK (auth.role() = 'service_role');

-- Add the 'folder' column to the 'saved_recipes' table if it doesn't exist
DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1
    FROM information_schema.columns
    WHERE table_schema = 'public'
    AND table_name = 'saved_recipes'
    AND column_name = 'folder'
  ) THEN
    ALTER TABLE public.saved_recipes
    ADD COLUMN folder TEXT DEFAULT 'Saved Recipes' NOT NULL;
  END IF;
END$$;

-- Update or add the comment for the 'folder' column
COMMENT ON COLUMN public.saved_recipes.folder IS 'The folder or category the recipe belongs to (e.g., "Saved Recipes", "Favorites", "Weeknight Dinners").';

-- Create the 'usage_history' table (if it doesn't fully match this, adjust or recreate)
CREATE TABLE IF NOT EXISTS public.usage_history (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id UUID REFERENCES auth.users(id) ON DELETE SET NULL, -- Allow anonymous, or ON DELETE CASCADE if user_id is NOT NULL
  created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
  prompt_text TEXT,
  recipe_name TEXT,
  is_anonymous BOOLEAN DEFAULT FALSE
);

-- Comments
COMMENT ON TABLE public.usage_history IS 'Logs API usage for recipe generation.';
COMMENT ON COLUMN public.usage_history.user_id IS 'The user who made the request, if logged in.';
COMMENT ON COLUMN public.usage_history.is_anonymous IS 'True if the request was made by an anonymous user.';

-- Enable RLS (optional for this table if only service_role writes to it, but good practice)
ALTER TABLE public.usage_history ENABLE ROW LEVEL SECURITY;

-- Policy: Allow service_role to insert usage history (as done by your API route)
DROP POLICY IF EXISTS "Allow service_role to insert usage history" ON public.usage_history;
CREATE POLICY "Allow service_role to insert usage history"
  ON public.usage_history FOR INSERT
  WITH CHECK (auth.role() = 'service_role');

-- Policy: Allow service_role to update usage history (for adding recipe_name later)
DROP POLICY IF EXISTS "Allow service_role to update usage history" ON public.usage_history;
CREATE POLICY "Allow service_role to update usage history"
  ON public.usage_history FOR UPDATE
  USING (auth.role() = 'service_role')
  WITH CHECK (auth.role() = 'service_role');

-- Policy: (Optional) If users should see their own history
-- CREATE POLICY "Allow individual user read access to their own usage"
--   ON public.usage_history FOR SELECT
--   USING ((select auth.uid()) = user_id AND is_anonymous = FALSE);

-- Create a table for anonymous usage tracking by IP
CREATE TABLE IF NOT EXISTS public.anonymous_usage (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  ip_identifier TEXT NOT NULL,
  created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
  prompt_text TEXT
);

-- Add an index for faster IP-based queries
CREATE INDEX IF NOT EXISTS idx_anonymous_usage_ip_date ON public.anonymous_usage (ip_identifier, created_at);

-- Comments for clarity
COMMENT ON TABLE public.anonymous_usage IS 'Tracks usage by anonymous users identified by IP.';
COMMENT ON COLUMN public.anonymous_usage.ip_identifier IS 'IP address or hashed IP of anonymous user.';

-- Enable Row Level Security
ALTER TABLE public.anonymous_usage ENABLE ROW LEVEL SECURITY;

-- Only service_role can manage anonymous usage data
DROP POLICY IF EXISTS "Allow service_role full access to anonymous_usage" ON public.anonymous_usage;
CREATE POLICY "Allow service_role full access to anonymous_usage"
  ON public.anonymous_usage FOR ALL
  USING (auth.role() = 'service_role')
  WITH CHECK (auth.role() = 'service_role'); 