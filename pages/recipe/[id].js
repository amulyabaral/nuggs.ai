import Head from 'next/head';
import Link from 'next/link';
import { useState, useEffect } from 'react';
import { useRouter } from 'next/router';
import { useAuth } from '../../contexts/AuthContext';
import { supabase } from '../../utils/supabaseClient';

export default function RecipeDetail() {
  const { user, loading } = useAuth();
  const [recipe, setRecipe] = useState(null);
  const [loadingRecipe, setLoadingRecipe] = useState(true);
  const [error, setError] = useState(null);
  const router = useRouter();
  const { id } = router.query;
  
  useEffect(() => {
    if (!loading && !user) {
      router.push('/');
      return;
    }
    
    if (id && user) {
      fetchRecipe(id);
    }
  }, [id, user, loading, router]);
  
  async function fetchRecipe(recipeId) {
    try {
      setLoadingRecipe(true);
      
      const { data, error } = await supabase
        .from('saved_recipes')
        .select('*')
        .eq('id', recipeId)
        .eq('user_id', user.id)
        .single();
        
      if (error) throw error;
      
      if (!data) {
        throw new Error('Recipe not found or you do not have permission to view it.');
      }
      
      setRecipe(data);
    } catch (error) {
      console.error('Error fetching recipe:', error);
      setError(error.message);
    } finally {
      setLoadingRecipe(false);
    }
  }
  
  async function toggleFavorite() {
    try {
      const { error } = await supabase
        .from('saved_recipes')
        .update({ is_favorite: !recipe.is_favorite })
        .eq('id', id);
        
      if (error) throw error;
      
      setRecipe({
        ...recipe,
        is_favorite: !recipe.is_favorite
      });
    } catch (error) {
      console.error('Error toggling favorite:', error);
    }
  }
  
  if (loading || loadingRecipe) {
    return <div className="loadingSpinner">Loading recipe...</div>;
  }
  
  if (error) {
    return (
      <div className="pageContainer">
        <Head>
          <title>Error | nuggs.ai</title>
        </Head>
        
        <header className="mainHeader">
          <div className="logoArea">
            <h1 className="logoText"><span className="logoEmoji">ü•¶ </span> nuggs.ai</h1>
          </div>
          <nav>
            <Link href="/" className="navLink">
              Home
            </Link>
            <Link href="/dashboard" className="navLink">
              Dashboard
            </Link>
          </nav>
        </header>
        
        <main className="errorContainer">
          <h1>Error</h1>
          <p>{error}</p>
          <Link href="/dashboard" className="backButton">
            Back to Dashboard
          </Link>
        </main>
      </div>
    );
  }
  
  if (!recipe) {
    return <div className="loadingSpinner">Recipe not found</div>;
  }
  
  // Parse the recipe data
  const recipeData = recipe.recipe_data;
  
  return (
    <div className="pageContainer">
      <Head>
        <title>{recipeData.recipeName || 'Recipe'} | nuggs.ai</title>
        <meta name="description" content={recipeData.description || 'A healthy recipe generated by nuggs.ai'} />
      </Head>
      
      <header className="mainHeader">
        <div className="logoArea">
          <h1 className="logoText"><span className="logoEmoji">ü•¶ </span> nuggs.ai</h1>
        </div>
        <nav>
          <Link href="/" className="navLink">
            Home
          </Link>
          <Link href="/dashboard" className="navLink">
            Dashboard
          </Link>
        </nav>
      </header>
      
      <main className="recipeDetailContainer">
        <div className="recipeDetailHeader">
          <Link href="/dashboard" className="backLink">
            ‚Üê Back to Dashboard
          </Link>
          
          <div className="recipeActions">
            <button 
              onClick={toggleFavorite}
              className={`favoriteButton ${recipe.is_favorite ? 'favorited' : ''}`}
              title={recipe.is_favorite ? 'Remove from favorites' : 'Add to favorites'}
            >
              {recipe.is_favorite ? '‚òÖ' : '‚òÜ'}
            </button>
          </div>
        </div>
        
        {/* Render the recipe using similar components as in the home page */}
        <div className="recipeOutputContainer">
          <div className="recipeNameCard highlightedRecipeCard">
            <h2 className="recipeTitlePill">{recipeData.recipeName || 'Healthy Recipe'}</h2>
            <p>{recipeData.description || 'No description provided.'}</p>
            <div className="recipeMeta">
              <span><strong>Prep:</strong> {recipeData.prepTime || 'N/A'}</span>
              <span><strong>Cook:</strong> {recipeData.cookTime || 'N/A'}</span>
              <span><strong>Difficulty:</strong> {recipeData.difficultyRating || 'N/A'}</span>
              <span><strong>Servings:</strong> <span style={{fontWeight: '600'}}>{recipeData.servings || 'N/A'}</span></span>
              {recipeData.nutritionInfo && recipeData.nutritionInfo.calories && (
                <span><strong>Calories:</strong> <span style={{fontWeight: '600'}}>{recipeData.nutritionInfo.calories}</span></span>
              )}
            </div>
            {recipeData.healthBenefits && recipeData.healthBenefits.length > 0 && (
              <div className="healthBenefitsSection">
                <strong>Health Highlights:</strong>
                <ul>
                  {recipeData.healthBenefits.map((benefit, idx) => <li key={idx}>{benefit}</li>)}
                </ul>
              </div>
            )}
          </div>

          <div className="recipeSection">
            <h3>Ingredients</h3>
            <div className="ingredientsGrid">
              {recipeData.ingredients && recipeData.ingredients.length > 0 ? recipeData.ingredients.map((ing, index) => (
                <div
                  key={index}
                  className="ingredientPill"
                >
                  <span className="ingredientName">{ing.name}</span>
                  <span className="ingredientQuantity">{`${ing.quantity || ''} ${ing.unit || ''}`}</span>
                  {ing.notes && <small className="ingredientNotes">({ing.notes})</small>}
                </div>
              )) : <p>No ingredients listed.</p>}
            </div>
          </div>

          <div className="recipeSection">
            <h3>Instructions</h3>
            {recipeData.instructions && recipeData.instructions.length > 0 ? (
              <ul className="instructionsList">
                {recipeData.instructions.map((instr, index) => (
                  <li
                    key={instr.stepNumber || index}
                    className="instructionStep"
                  >
                    <div className="instructionHeader">
                      <div className="instructionCheckboxWrapper">
                        <span className="stepNumber">Step {instr.stepNumber}:</span>
                      </div>
                    </div>
                    <div className="stepDescriptionWrapper">
                      <span className="stepDescription">{instr.description}</span>
                    </div>
                  </li>
                ))}
              </ul>
            ) : <p>No instructions provided.</p>}
          </div>

          {recipeData.substitutionSuggestions && recipeData.substitutionSuggestions.length > 0 && (
            <div className="recipeSection">
              <h3>Healthier Substitution Ideas</h3>
              <div className="suggestionCardsContainer">
                {recipeData.substitutionSuggestions.map((sub, index) => (
                  <div key={`sub-${index}`} className="suggestionCard">
                    <h4>{sub.healthierSubstitute}</h4>
                    {sub.originalIngredient && <p><small>Instead of: {sub.originalIngredient}</small></p>}
                    <p>{sub.reason}</p>
                    {sub.notes && <small><em>Note: {sub.notes}</em></small>}
                  </div>
                ))}
              </div>
            </div>
          )}

          {recipeData.pairingSuggestions && recipeData.pairingSuggestions.length > 0 && (
            <div className="recipeSection">
              <h3>Healthy Pairing Suggestions</h3>
              <div className="suggestionCardsContainer">
                {recipeData.pairingSuggestions.map((item, index) => (
                  <div
                    key={`pairing-${index}`}
                    className="suggestionCard"
                  >
                    <h4>{item.emoji && <span className="suggestionEmoji">{item.emoji}</span>} {item.name} <small>({item.type})</small></h4>
                    {item.description && <p>{item.description}</p>}
                  </div>
                ))}
              </div>
            </div>
          )}

          {recipeData.nutritionInfo && (
            <div className="nutritionInfoSection">
              <strong>Nutrition (per serving):</strong>
              <div className="nutritionGrid">
                {recipeData.nutritionInfo.calories && (
                  <div className="nutritionPill">
                    <span className="nutritionLabel">Calories:</span>
                    <span className="nutritionValue">{recipeData.nutritionInfo.calories}</span>
                  </div>
                )}
                {recipeData.nutritionInfo.protein && (
                  <div className="nutritionPill">
                    <span className="nutritionLabel">Protein:</span>
                    <span className="nutritionValue">{recipeData.nutritionInfo.protein}</span>
                  </div>
                )}
                {recipeData.nutritionInfo.carbs && (
                  <div className="nutritionPill">
                    <span className="nutritionLabel">Carbs:</span>
                    <span className="nutritionValue">{recipeData.nutritionInfo.carbs}</span>
                  </div>
                )}
                {recipeData.nutritionInfo.fat && (
                  <div className="nutritionPill">
                    <span className="nutritionLabel">Fat:</span>
                    <span className="nutritionValue">{recipeData.nutritionInfo.fat}</span>
                  </div>
                )}
              </div>
            </div>
          )}
        </div>
      </main>
    </div>
  );
} 